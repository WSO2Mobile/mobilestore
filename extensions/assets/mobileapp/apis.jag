<%
var type = "mobileapp";
var goose = require('/modules/goose.js').goose;
var Handle = require("handlebars").Handlebars;
var router = new goose({CONTEXT: "/store/"});
var configs = require('/config/dataconf.json');
var log =new Log();
var store = require("/modules/store.js").store(request, session);
var user = require('/modules/user.js').current(session);
var process = require("process");
var mam = require('/modules/mam.js').mam;
var mamServer = new mam();
/* 
	Get Devices
*/
router.get('apps/users/{userid}/devices', function(ctx){
	if(user!=undefined){
		var result = mamServer.getDevices(user.username, ctx.platform);
		print(result.data);
	}else{
		response.sendError(404);
	}
});

/*
	Get My Apps
*/
router.get("apps/devices/{deviceid}/getApps", function(ctx){
    if (!user) {
       response.sendError(401, 'Unauthorized');
       return;
   	}
	var username = user.username;
	var indexUsername = String(username);
	if(indexUsername.indexOf('@') !== -1){
		indexUsername = indexUsername.replace('@', ':');
	}
	var apps = parse(mamServer.getDeviceApps(ctx.deviceid)) ['received_data'];
	var subscriptions = store.subscriptions(type);
	subscriptions = subscriptions['mobileapp'];
	for (var i = subscriptions.length - 1; i >= 0; i--){
		var subscription = subscriptions[i]
		log.info('>>sdfds');
		log.info(user);
		for (var j = apps.length - 1; j >= 0; j--){
			var app = apps[j];
			if(app.package == subscription.attributes.overview_packagename){
				var path = user.userSpace(username)+"/subscriptions/mobileapp/"+subscription.id;
				log.info(store.registry.exists(path));
				if(store.registry.exists(path)) {
					var devicelist = store.registry.content(path);
					if(devicelist==null){
						devicelist = [];
					}else{
						devicelist = parse(devicelist.toString());
					}
					devicelist.push(ctx.deviceid);
					log.info(path);
					log.info(devicelist);
			        store.registry.put(path, {
			            name: subscription.id,
			            content: stringify(devicelist)
			        });
			    }
			}
		};
	};

});
/*
	iOS device will first perform a request to the below end point - it will serve a plist file
	with an endpoint to pickup the .ipa archive
*/
router.get("apps/install/ios/{id}", function(ctx){
	var appName = ctx.id;
	var asset =  store.asset(type, appName);
	//Assuming that the extension is of 3 letters
	var iosManifest = compileTemplate("/extensions/assets/"+type+"/resources/ios_profile.hbs", {url:configs.mam.ip+asset.attributes.overview_url, bundleid: asset.attributes.overview_packageName, bundleversion: asset.attributes.overview_bundleVersion,  appname:asset.name});
	response.contentType = "application/xml";
	print(iosManifest);
});



// DEVICES APIS
router.post('apps/devices/{deviceid}/install', function(ctx){
    if (!user) {
        response.sendError(401, 'Unauthorized');
        return;
    }
	var asset =  store.asset(type, ctx.asset);
	var url = asset.attributes.overview_url; 
	log.info(asset.attributes.overview_type);
	if(asset.attributes.overview_platform.toUpperCase()=='WEBAPP'){
		mamServer.installWebClip(url, asset.attributes.overview_name, ctx.deviceid);
	}
	url = configs.mam.ip+url;
	if(asset.attributes.overview_type.toUpperCase()=="MARKET"){
		url=asset.attributes.overview_packageName;
	}
	if(asset.attributes.overview_platform.toUpperCase()=='IOS'){
		url =  configs.mam.ip+"store/apps/install/ios/"+asset.id;
		mamServer.install(asset.attributes.overview_type, url, ctx.deviceid);
	}else if(asset.attributes.overview_platform.toUpperCase()=='ANDROID'){
		mamServer.install(asset.attributes.overview_type, url, ctx.deviceid);
	}
});

router.post('apps/devices/{deviceid}/uninstall', function(ctx){
	var asset =  store.assetID(type, ctx.asset);
	var install_asset = asset.attributes.overview_packageName; 
	if(asset.attributes.overview_platform.toUpperCase()=='IOS'){
		install_asset = asset.attributes.overview_appid;
	}
	mamServer.uninstall(install_asset, ctx.deviceid);
});

var compileTemplate = function(templatePath, context){
	var template = Handle.compile(getResource(templatePath));
	return template(context);
}
function getResource(name){
	var f = new File(name);
	f.open("r");
	var cont = f.readAll();
	f.close();
	return cont;
}
router.process(request);
%>
